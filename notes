remind self how bounding function works

obj > max_obj vs obj >= max_obj

is "if max_obj_val == max_bnd_val:" in right place

is it quicker to get new extent by masking over old extent or is it just as good to mask over all objects

need a different word for context class. isnt technically correct

should i use neginf or 0 for init vals

should the best query be maximally or minimally closed?

does making a new Node make deepcopy of all properties?

make active_attr a search property

should get_target_mean be set up more efficiently?

should inter-ordinal scaling be used for ip search (? could binarisation be used?

is it a significant improvement to have values already calculated for obj+bnd funcs? Happens in mine not in realkd

assert labels not all zero

I want to better understand how order of columns in binarised dataset affects performance


from heapq import heappop, heappush
import numpy as np
from search import IPSearch, Utilities as U


class BFS(IPSearch): # best first search
    def __init__(self, root, curr_node, heap, context, res, obj, bnd):
        super().__init__(root, curr_node, heap, context, res, obj, bnd)


    def push_children(self, curr_node, j, j_shift):
        if not curr_node.intent.fully_closed(j):
            new_locked_attrs = np.copy(curr_node.locked_attrs)
            new_locked_attrs[j] = 1
            minus_upper = curr_node.get_minus_upper(j)

            self.res.num_candidates += 1
            minus_upper.obj_val = self.obj(minus_upper.extension.indices)
            minus_upper.bnd_val = self.bnd(minus_upper.extension.indices)
            heappush(self.heap, minus_upper)

            if not curr_node.locked_attrs[j]: # if j is not a locked attribute
                plus_lower = curr_node.get_plus_lower(j)
                #potentially add a check here
                self.res.num_candidates += 1
                plus_lower.obj_val = self.obj(plus_lower.extension.indices)
                plus_lower.bnd_val = self.bnd(plus_lower.extension.indices)
                heappush(self.heap, plus_lower)
        if j_shift:
            shifted_node = 
            heappush(self.heap, )

    def search(self):
        max_bnd = self.bnd(self.root.extension.indices)
        self.root.obj_val = self.obj(self.root.extension.indices)
        self.root.bnd_val = max_bnd
        heappush(self.heap, self.root)
        
        while self.heap: # while queue is not empty

            curr_node = heappop(self.heap)
            curr_node.obj_val = self.obj(curr_node.extension.indices)
            curr_node.bnd_val = self.bnd(curr_node.extension.indices)
            
            j = curr_node.active_attr
            # self.res.max_obj = max(self.curr_node.obj_val, self.res.max_obj)
            if curr_node.obj_val >= self.res.max_obj:
                    self.res.max_obj = curr_node.obj_val
                    curr_node.intent = curr_node.extension.get_closure()
                    self.res.best_node = curr_node
            if curr_node.bnd_val > self.res.max_obj: # or self.curr_node == self.root: # root node check because bnd > max_obj check fails on root
                closed_intent = curr_node.extension.get_closure() # maybe make this conditional to avoid repeat closure
                if U.is_canonical(curr_node.intent, closed_intent, j):
                    curr_node.intent = closed_intent
                    self.res.num_nodes += 1
                    if self.res.max_obj == max_bnd:
                        break
                    self.push_children(curr_node, j)
                    if j>0:
                        self.push_children(curr_node, j-1, j_shift=True)

    def run(self):
        return self.search()